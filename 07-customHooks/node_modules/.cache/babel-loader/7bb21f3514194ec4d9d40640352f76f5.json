{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useFetch = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useFetch, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useFetch;","map":{"version":3,"sources":["D:/proiecte/react-udemy/Folder nou/07-customHooks/src/Hooks/use-fetch.js"],"names":["useState","useFetch","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","useCallback","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMQ,WAAW,GAAGC,WAAW,CAC7B,MAAOC,QAAP,IAAoB;AAClBL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,aAAa,CAACW,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEZ,aAAa,CAACY,MAAd,GAAuBZ,aAAa,CAACY,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEb,aAAa,CAACa,OAAd,GAAwBb,aAAa,CAACa,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEd,aAAa,CAACc,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAehB,aAAa,CAACc,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAnB,MAAAA,SAAS,CAACkB,IAAD,CAAT;AACD,KAbD,CAaE,OAAOE,GAAP,EAAY;AACZhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArB4B,EAsB7B,CAACH,aAAD,EAAgBC,SAAhB,CAtB6B,CAA/B;AAwBA,SAAO;AACLC,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAjCD;;GAAMP,Q;;AAmCN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useFetch = (requestConfig, applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback(\r\n    async (taskText) => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(requestConfig.url, {\r\n          method: requestConfig.method ? requestConfig.method : \"GET\",\r\n          headers: requestConfig.headers ? requestConfig.headers : {},\r\n          body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Request failed!\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        applyData(data);\r\n      } catch (err) {\r\n        setError(err.message || \"Something went wrong!\");\r\n      }\r\n      setIsLoading(false);\r\n    },\r\n    [requestConfig, applyData]\r\n  );\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}