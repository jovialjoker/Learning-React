{"ast":null,"code":"var _jsxFileName = \"D:\\\\proiecte\\\\react-udemy\\\\Folder nou\\\\08-forms-deeper-dive\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useInput } from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputIsInvalid,\n    valueIsValid: nameIsValid,\n    valueInputChangeHandler: nameInputChangeHandler,\n    valueInputBlurHandler: nameInputBlurHandler,\n    reset: resetName\n  } = useInput(value => value.trim() !== \"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [emailWasTouched, setEmailWasTouched] = useState(false);\n  const emailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.indexOf(\"@\") !== -1 && enteredEmail.indexOf(\".\") !== -1;\n  const emailInputIsInvalid = !emailIsValid && emailWasTouched;\n  let formIsValid = false;\n\n  if (nameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = e => {\n    setEnteredEmail(e.target.value);\n  };\n\n  const emailInputBlurHandler = e => {\n    setEmailWasTouched(true);\n  };\n\n  const formSubmit = e => {\n    e.preventDefault();\n    setEmailWasTouched(true);\n\n    if (!nameIsValid || !emailIsValid) {\n      return;\n    }\n\n    resetName();\n    setEnteredEmail(\"\");\n    setNameWasTouched(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${nameInputIsInvalid ? \"form-control invalid\" : \"form-control\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Input is not Valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${emailInputIsInvalid ? \"form-control invalid\" : \"form-control\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Input is not Valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"egqvGaOnBy3egUZaKRnsJBcrddE=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/proiecte/react-udemy/Folder nou/08-forms-deeper-dive/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputIsInvalid","valueIsValid","nameIsValid","valueInputChangeHandler","nameInputChangeHandler","valueInputBlurHandler","nameInputBlurHandler","reset","resetName","trim","enteredEmail","setEnteredEmail","emailWasTouched","setEmailWasTouched","emailIsValid","indexOf","emailInputIsInvalid","formIsValid","emailInputChangeHandler","e","target","emailInputBlurHandler","formSubmit","preventDefault","setNameWasTouched"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AACJC,IAAAA,KAAK,EAAEC,WADH;AAEJC,IAAAA,QAAQ,EAAEC,kBAFN;AAGJC,IAAAA,YAAY,EAAEC,WAHV;AAIJC,IAAAA,uBAAuB,EAAEC,sBAJrB;AAKJC,IAAAA,qBAAqB,EAAEC,oBALnB;AAMJC,IAAAA,KAAK,EAAEC;AANH,MAOFd,QAAQ,CAAEG,KAAD,IAAWA,KAAK,CAACY,IAAN,OAAiB,EAA7B,CAPZ;AASA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CAAC,KAAD,CAAtD;AAEA,QAAMqB,YAAY,GAChBJ,YAAY,CAACD,IAAb,OAAwB,EAAxB,IACAC,YAAY,CAACK,OAAb,CAAqB,GAArB,MAA8B,CAAC,CAD/B,IAEAL,YAAY,CAACK,OAAb,CAAqB,GAArB,MAA8B,CAAC,CAHjC;AAIA,QAAMC,mBAAmB,GAAG,CAACF,YAAD,IAAiBF,eAA7C;AAEA,MAAIK,WAAW,GAAG,KAAlB;;AACA,MAAIf,WAAW,IAAIY,YAAnB,EAAiC;AAC/BG,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAMC,uBAAuB,GAAIC,CAAD,IAAO;AACrCR,IAAAA,eAAe,CAACQ,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAf;AACD,GAFD;;AAIA,QAAMwB,qBAAqB,GAAIF,CAAD,IAAO;AACnCN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAGA,QAAMS,UAAU,GAAIH,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACI,cAAF;AACAV,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;;AACA,QAAI,CAACX,WAAD,IAAgB,CAACY,YAArB,EAAmC;AACjC;AACD;;AACDN,IAAAA,SAAS;AACTG,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAa,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GATD;;AAUA,sBACE;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAAA,4BACE;AACE,MAAA,SAAS,EAAG,GACVtB,kBAAkB,GAAG,sBAAH,GAA4B,cAC/C,EAHH;AAAA,8BAKE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEI,sBAHZ;AAIE,QAAA,MAAM,EAAEE,oBAJV;AAKE,QAAA,KAAK,EAAER;AALT;AAAA;AAAA;AAAA;AAAA,cANF,EAaGE,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE;AACE,MAAA,SAAS,EAAG,GACVgB,mBAAmB,GAAG,sBAAH,GAA4B,cAChD,EAHH;AAAA,8BAKE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,QAAQ,EAAEE,uBAHZ;AAIE,QAAA,MAAM,EAAEG,qBAJV;AAKE,QAAA,KAAK,EAAEX;AALT;AAAA;AAAA;AAAA;AAAA,cANF,EAaGM,mBAAmB,iBAClB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,eAiCE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CAhFD;;GAAMtB,W;UAQAD,Q;;;KARAC,W;AAkFN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\nimport { useInput } from \"../hooks/use-input\";\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    hasError: nameInputIsInvalid,\n    valueIsValid: nameIsValid,\n    valueInputChangeHandler: nameInputChangeHandler,\n    valueInputBlurHandler: nameInputBlurHandler,\n    reset: resetName,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [emailWasTouched, setEmailWasTouched] = useState(false);\n\n  const emailIsValid =\n    enteredEmail.trim() !== \"\" &&\n    enteredEmail.indexOf(\"@\") !== -1 &&\n    enteredEmail.indexOf(\".\") !== -1;\n  const emailInputIsInvalid = !emailIsValid && emailWasTouched;\n\n  let formIsValid = false;\n  if (nameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = (e) => {\n    setEnteredEmail(e.target.value);\n  };\n\n  const emailInputBlurHandler = (e) => {\n    setEmailWasTouched(true);\n  };\n  const formSubmit = (e) => {\n    e.preventDefault();\n    setEmailWasTouched(true);\n    if (!nameIsValid || !emailIsValid) {\n      return;\n    }\n    resetName();\n    setEnteredEmail(\"\");\n    setNameWasTouched(false);\n  };\n  return (\n    <form onSubmit={formSubmit}>\n      <div\n        className={`${\n          nameInputIsInvalid ? \"form-control invalid\" : \"form-control\"\n        }`}\n      >\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && <p className=\"error-text\">Input is not Valid</p>}\n      </div>\n      <div\n        className={`${\n          emailInputIsInvalid ? \"form-control invalid\" : \"form-control\"\n        }`}\n      >\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">Input is not Valid</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}