{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useInput = validateValue => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const isValid = validateValue(value);\n  const hasErrors = !isValid && isTouched;\n\n  const changeHandler = e => {\n    setValue(e.current.value);\n  };\n\n  const blurHandler = e => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value,\n    isValid,\n    hasErrors,\n    blurHandler,\n    changeHandler,\n    reset\n  };\n};\n\n_s(useInput, \"azzR0d/pLm2ya9A1m2K55q4cGzc=\");","map":{"version":3,"sources":["D:/proiecte/react-udemy/Folder nou/08-forms-deeper-dive/src/hooks/useInput.js"],"names":["useState","useInput","validateValue","value","setValue","isTouched","setIsTouched","isValid","hasErrors","changeHandler","e","current","blurHandler","reset"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMO,OAAO,GAAGL,aAAa,CAACC,KAAD,CAA7B;AACA,QAAMK,SAAS,GAAG,CAACD,OAAD,IAAYF,SAA9B;;AAEA,QAAMI,aAAa,GAAIC,CAAD,IAAO;AAC3BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,OAAF,CAAUR,KAAX,CAAR;AACD,GAFD;;AAGA,QAAMS,WAAW,GAAIF,CAAD,IAAO;AACzBJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAGA,QAAMO,KAAK,GAAG,MAAM;AAClBT,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAIA,SAAO;AACLH,IAAAA,KADK;AAELI,IAAAA,OAFK;AAGLC,IAAAA,SAHK;AAILI,IAAAA,WAJK;AAKLH,IAAAA,aALK;AAMLI,IAAAA;AANK,GAAP;AAQD,CAxBM;;GAAMZ,Q","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport const useInput = (validateValue) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  const isValid = validateValue(value);\r\n  const hasErrors = !isValid && isTouched;\r\n\r\n  const changeHandler = (e) => {\r\n    setValue(e.current.value);\r\n  };\r\n  const blurHandler = (e) => {\r\n    setIsTouched(true);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n  return {\r\n    value,\r\n    isValid,\r\n    hasErrors,\r\n    blurHandler,\r\n    changeHandler,\r\n    reset,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}